name = 'text_input_unstable_v3'
summary = 'Protocol for composing text'
description = '''
This protocol allows compositors to act as input methods and to send text
to applications. A text input object is used to manage state of what are
typically text entry fields in the application.

This document adheres to the RFC 2119 when using words like "must",
"should", "may", etc.

Warning! The protocol described in this file is experimental and
backward incompatible changes may be made. Backward compatible changes
may be added together with the corresponding interface version bump.
Backward incompatible changes are done by bumping the version number in
the protocol and interface names and resetting the interface version.
Once the protocol is to be declared stable, the 'z' prefix and the
version number in the protocol and interface names are removed and the
interface version number is reset.'''
copyright = '''
Copyright © 2012, 2013 Intel Corporation
Copyright © 2015, 2016 Jan Arne Petersen
Copyright © 2017, 2018 Red Hat, Inc.
Copyright © 2018    Purism SPC

Permission to use, copy, modify, distribute, and sell this
software and its documentation for any purpose is hereby granted
without fee, provided that the above copyright notice appear in
all copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
the copyright holders not be used in advertising or publicity
pertaining to distribution of the software without specific,
written prior permission. The copyright holders make no
representations about the suitability of this software for any
purpose. It is provided "as is" without express or implied
warranty.

THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
THIS SOFTWARE.'''

[[interface]]
name = 'zwp_text_input_v3'
summary = 'text input'
description = '''
The zwp_text_input_v3 interface represents text input and input methods
associated with a seat. It provides enter/leave events to follow the
text input focus for a seat.

Requests are used to enable/disable the text-input object and set
state information like surrounding and selected text or the content type.
The information about the entered text is sent to the text-input object
via the preedit_string and commit_string events.

Text is valid UTF-8 encoded, indices and lengths are in bytes. Indices
must not point to middle bytes inside a code point: they must either
point to the first byte of a code point or to the end of the buffer.
Lengths must be measured between two valid indices.

Focus moving throughout surfaces will result in the emission of
zwp_text_input_v3.enter and zwp_text_input_v3.leave events. The focused
surface must commit zwp_text_input_v3.enable and
zwp_text_input_v3.disable requests as the keyboard focus moves across
editable and non-editable elements of the UI. Those two requests are not
expected to be paired with each other, the compositor must be able to
handle consecutive series of the same request.

State is sent by the state requests (set_surrounding_text,
set_content_type and set_cursor_rectangle) and a commit request. After an
enter event or disable request all state information is invalidated and
needs to be resent by the client.'''
version = 1

[[interface.enum]]
name = 'change_cause'
summary = 'text change reason'
description = 'Reason for the change of surrounding text or cursor posision.'

[[interface.enum.entry]]
name = 'input_method'
summary = 'input method caused the change'
value = 0

[[interface.enum.entry]]
name = 'other'
summary = 'something else than the input method caused the change'
value = 1

[[interface.enum]]
name = 'content_hint'
summary = 'content hint'
description = '''
Content hint is a bitmask to allow to modify the behavior of the text
input.'''

[[interface.enum.entry]]
name = 'none'
summary = 'no special behavior'
value = 0

[[interface.enum.entry]]
name = 'completion'
summary = 'suggest word completions'
value = 1

[[interface.enum.entry]]
name = 'spellcheck'
summary = 'suggest word corrections'
value = 2

[[interface.enum.entry]]
name = 'auto_capitalization'
summary = 'switch to uppercase letters at the start of a sentence'
value = 4

[[interface.enum.entry]]
name = 'lowercase'
summary = 'prefer lowercase letters'
value = 8

[[interface.enum.entry]]
name = 'uppercase'
summary = 'prefer uppercase letters'
value = 16

[[interface.enum.entry]]
name = 'titlecase'
summary = 'prefer casing for titles and headings (can be language dependent)'
value = 32

[[interface.enum.entry]]
name = 'hidden_text'
summary = 'characters should be hidden'
value = 64

[[interface.enum.entry]]
name = 'sensitive_data'
summary = 'typed text should not be stored'
value = 128

[[interface.enum.entry]]
name = 'latin'
summary = 'just Latin characters should be entered'
value = 256

[[interface.enum.entry]]
name = 'multiline'
summary = 'the text input is multiline'
value = 512

[[interface.enum]]
name = 'content_purpose'
summary = 'content purpose'
description = '''
The content purpose allows to specify the primary purpose of a text
input.

This allows an input method to show special purpose input panels with
extra characters or to disallow some characters.'''

[[interface.enum.entry]]
name = 'normal'
summary = 'default input, allowing all characters'
value = 0

[[interface.enum.entry]]
name = 'alpha'
summary = 'allow only alphabetic characters'
value = 1

[[interface.enum.entry]]
name = 'digits'
summary = 'allow only digits'
value = 2

[[interface.enum.entry]]
name = 'number'
summary = 'input a number (including decimal separator and sign)'
value = 3

[[interface.enum.entry]]
name = 'phone'
summary = 'input a phone number'
value = 4

[[interface.enum.entry]]
name = 'url'
summary = 'input an URL'
value = 5

[[interface.enum.entry]]
name = 'email'
summary = 'input an email address'
value = 6

[[interface.enum.entry]]
name = 'name'
summary = 'input a name of a person'
value = 7

[[interface.enum.entry]]
name = 'password'
summary = 'input a password (combine with sensitive_data hint)'
value = 8

[[interface.enum.entry]]
name = 'pin'
summary = 'input is a numeric password (combine with sensitive_data hint)'
value = 9

[[interface.enum.entry]]
name = 'date'
summary = 'input a date'
value = 10

[[interface.enum.entry]]
name = 'time'
summary = 'input a time'
value = 11

[[interface.enum.entry]]
name = 'datetime'
summary = 'input a date and time'
value = 12

[[interface.enum.entry]]
name = 'terminal'
summary = 'input for a terminal'
value = 13

[[interface.request]]
name = 'destroy'
destructor = true
summary = 'Destroy the wp_text_input'
description = '''
Destroy the wp_text_input object. Also disables all surfaces enabled
through this wp_text_input object.'''

[[interface.request]]
name = 'enable'
summary = 'Request text input to be enabled'
description = '''
Requests text input on the surface previously obtained from the enter
event.

This request must be issued every time the active text input changes
to a new one, including within the current surface. Use
zwp_text_input_v3.disable when there is no longer any input focus on
the current surface.

This request resets all state associated with previous enable, disable,
set_surrounding_text, set_text_change_cause, set_content_type, and
set_cursor_rectangle requests, as well as the state associated with
preedit_string, commit_string, and delete_surrounding_text events.

The set_surrounding_text, set_content_type and set_cursor_rectangle
requests must follow if the text input supports the necessary
functionality.

State set with this request is double-buffered. It will get applied on
the next zwp_text_input_v3.commit request, and stay valid until the
next committed enable or disable request.

The changes must be applied by the compositor after issuing a
zwp_text_input_v3.commit request.'''

[[interface.request]]
name = 'disable'
summary = 'Disable text input on a surface'
description = '''
Explicitly disable text input on the current surface (typically when
there is no focus on any text entry inside the surface).

State set with this request is double-buffered. It will get applied on
the next zwp_text_input_v3.commit request.'''

[[interface.request]]
name = 'set_surrounding_text'
summary = 'sets the surrounding text'
description = '''
Sets the surrounding plain text around the input, excluding the preedit
text.

The client should notify the compositor of any changes in any of the
values carried with this request, including changes caused by handling
incoming text-input events as well as changes caused by other
mechanisms like keyboard typing.

If the client is unaware of the text around the cursor, it should not
issue this request, to signify lack of support to the compositor.

Text is UTF-8 encoded, and should include the cursor position, the
complete selection and additional characters before and after them.
There is a maximum length of wayland messages, so text can not be
longer than 4000 bytes.

Cursor is the byte offset of the cursor within text buffer.

Anchor is the byte offset of the selection anchor within text buffer.
If there is no selected text, anchor is the same as cursor.

If any preedit text is present, it is replaced with a cursor for the
purpose of this event.

Values set with this request are double-buffered. They will get applied
on the next zwp_text_input_v3.commit request, and stay valid until the
next committed enable or disable request.

The initial state for affected fields is empty, meaning that the text
input does not support sending surrounding text. If the empty values
get applied, subsequent attempts to change them may have no effect.'''

[[interface.request.arg]]
name = 'text'
type = 'string'

[[interface.request.arg]]
name = 'cursor'
type = 'int'

[[interface.request.arg]]
name = 'anchor'
type = 'int'

[[interface.request]]
name = 'set_text_change_cause'
summary = 'indicates the cause of surrounding text change'
description = '''
Tells the compositor why the text surrounding the cursor changed.

Whenever the client detects an external change in text, cursor, or
anchor posision, it must issue this request to the compositor. This
request is intended to give the input method a chance to update the
preedit text in an appropriate way, e.g. by removing it when the user
starts typing with a keyboard.

cause describes the source of the change.

The value set with this request is double-buffered. It must be applied
and reset to initial at the next zwp_text_input_v3.commit request.

The initial value of cause is input_method.'''

[[interface.request.arg]]
name = 'cause'
type = 'uint'
enum = 'change_cause'

[[interface.request]]
name = 'set_content_type'
summary = 'set content purpose and hint'
description = '''
Sets the content purpose and content hint. While the purpose is the
basic purpose of an input field, the hint flags allow to modify some of
the behavior.

Values set with this request are double-buffered. They will get applied
on the next zwp_text_input_v3.commit request.
Subsequent attempts to update them may have no effect. The values
remain valid until the next committed enable or disable request.

The initial value for hint is none, and the initial value for purpose
is normal.'''

[[interface.request.arg]]
name = 'hint'
type = 'uint'
enum = 'content_hint'

[[interface.request.arg]]
name = 'purpose'
type = 'uint'
enum = 'content_purpose'

[[interface.request]]
name = 'set_cursor_rectangle'
summary = 'set cursor position'
description = '''
Marks an area around the cursor as a x, y, width, height rectangle in
surface local coordinates.

Allows the compositor to put a window with word suggestions near the
cursor, without obstructing the text being input.

If the client is unaware of the position of edited text, it should not
issue this request, to signify lack of support to the compositor.

Values set with this request are double-buffered. They will get applied
on the next zwp_text_input_v3.commit request, and stay valid until the
next committed enable or disable request.

The initial values describing a cursor rectangle are empty. That means
the text input does not support describing the cursor area. If the
empty values get applied, subsequent attempts to change them may have
no effect.'''

[[interface.request.arg]]
name = 'x'
type = 'int'

[[interface.request.arg]]
name = 'y'
type = 'int'

[[interface.request.arg]]
name = 'width'
type = 'int'

[[interface.request.arg]]
name = 'height'
type = 'int'

[[interface.request]]
name = 'commit'
summary = 'commit state'
description = '''
Atomically applies state changes recently sent to the compositor.

The commit request establishes and updates the state of the client, and
must be issued after any changes to apply them.

Text input state (enabled status, content purpose, content hint,
surrounding text and change cause, cursor rectangle) is conceptually
double-buffered within the context of a text input, i.e. between a
committed enable request and the following committed enable or disable
request.

Protocol requests modify the pending state, as opposed to the current
state in use by the input method. A commit request atomically applies
all pending state, replacing the current state. After commit, the new
pending state is as documented for each related request.

Requests are applied in the order of arrival.

Neither current nor pending state are modified unless noted otherwise.

The compositor must count the number of commit requests coming from
each zwp_text_input_v3 object and use the count as the serial in done
events.'''

[[interface.event]]
name = 'enter'
summary = 'enter event'
description = '''
Notification that this seat's text-input focus is on a certain surface.

When the seat has the keyboard capability the text-input focus follows
the keyboard focus. This event sets the current surface for the
text-input object.'''

[[interface.event.arg]]
name = 'surface'
type = 'object'
interface = 'wl_surface'

[[interface.event]]
name = 'leave'
summary = 'leave event'
description = '''
Notification that this seat's text-input focus is no longer on a
certain surface. The client should reset any preedit string previously
set.

The leave notification clears the current surface. It is sent before
the enter notification for the new focus.

When the seat has the keyboard capability the text-input focus follows
the keyboard focus.'''

[[interface.event.arg]]
name = 'surface'
type = 'object'
interface = 'wl_surface'

[[interface.event]]
name = 'preedit_string'
summary = 'pre-edit'
description = '''
Notify when a new composing text (pre-edit) should be set at the
current cursor position. Any previously set composing text must be
removed. Any previously existing selected text must be removed.

The argument text contains the pre-edit string buffer.

The parameters cursor_begin and cursor_end are counted in bytes
relative to the beginning of the submitted text buffer. Cursor should
be hidden when both are equal to -1.

They could be represented by the client as a line if both values are
the same, or as a text highlight otherwise.

Values set with this event are double-buffered. They must be applied
and reset to initial on the next zwp_text_input_v3.done event.

The initial value of text is an empty string, and cursor_begin,
cursor_end and cursor_hidden are all 0.'''

[[interface.event.arg]]
name = 'text'
type = 'string'

[[interface.event.arg]]
name = 'cursor_begin'
type = 'int'

[[interface.event.arg]]
name = 'cursor_end'
type = 'int'

[[interface.event]]
name = 'commit_string'
summary = 'text commit'
description = '''
Notify when text should be inserted into the editor widget. The text to
commit could be either just a single character after a key press or the
result of some composing (pre-edit).

Values set with this event are double-buffered. They must be applied
and reset to initial on the next zwp_text_input_v3.done event.

The initial value of text is an empty string.'''

[[interface.event.arg]]
name = 'text'
type = 'string'

[[interface.event]]
name = 'delete_surrounding_text'
summary = 'delete surrounding text'
description = '''
Notify when the text around the current cursor position should be
deleted.

Before_length and after_length are the number of bytes before and after
the current cursor index (excluding the selection) to delete.

If a preedit text is present, in effect before_length is counted from
the beginning of it, and after_length from its end (see done event
sequence).

Values set with this event are double-buffered. They must be applied
and reset to initial on the next zwp_text_input_v3.done event.

The initial values of both before_length and after_length are 0.'''

[[interface.event.arg]]
name = 'before_length'
type = 'uint'
summary = 'length of text before current cursor position'

[[interface.event.arg]]
name = 'after_length'
type = 'uint'
summary = 'length of text after current cursor position'

[[interface.event]]
name = 'done'
summary = 'apply changes'
description = '''
Instruct the application to apply changes to state requested by the
preedit_string, commit_string and delete_surrounding_text events. The
state relating to these events is double-buffered, and each one
modifies the pending state. This event replaces the current state with
the pending state.

The application must proceed by evaluating the changes in the following
order:

1. Replace existing preedit string with the cursor.
2. Delete requested surrounding text.
3. Insert commit string with the cursor at its end.
4. Calculate surrounding text to send.
5. Insert new preedit text in cursor position.
6. Place cursor inside preedit text.

The serial number reflects the last state of the zwp_text_input_v3
object known to the compositor. The value of the serial argument must
be equal to the number of commit requests already issued on that object.
When the client receives a done event with a serial different than the
number of past commit requests, it must proceed as normal, except it
should not change the current state of the zwp_text_input_v3 object.'''

[[interface.event.arg]]
name = 'serial'
type = 'uint'

[[interface]]
name = 'zwp_text_input_manager_v3'
summary = 'text input manager'
description = 'A factory for text-input objects. This object is a global singleton.'
version = 1

[[interface.request]]
name = 'destroy'
destructor = true
summary = 'Destroy the wp_text_input_manager'
description = 'Destroy the wp_text_input_manager object.'

[[interface.request]]
name = 'get_text_input'
summary = 'create a new text input object'
description = 'Creates a new text-input object for a given seat.'

[[interface.request.arg]]
name = 'id'
type = 'new_id'
interface = 'zwp_text_input_v3'

[[interface.request.arg]]
name = 'seat'
type = 'object'
interface = 'wl_seat'
